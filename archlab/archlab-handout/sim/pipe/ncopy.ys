#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
    xorq %rax,%rax      # count = 0;
    jmp Testx
Loopx:
    mrmovq (%rdi), %r8  # read val from src...
    mrmovq 8(%rdi), %r9  # read val from src...
    mrmovq 16(%rdi), %r10  # read val from src...
    mrmovq 24(%rdi), %r11  # read val from src...
    mrmovq 32(%rdi), %r12  # read val from src...

    rmmovq %r8, (%rsi)  # ...and store it to dst
    rmmovq %r9, 8(%rsi)  # ...and store it to dst
    rmmovq %r10, 16(%rsi)  # ...and store it to dst
    rmmovq %r11, 24(%rsi)  # ...and store it to dst
    rmmovq %r12, 32(%rsi)  # ...and store it to dst

judge0:
    andq %r8, %r8       # val <= 0?
    jle judge1            # if so, goto Npos:
    iaddq $1, %rax      # count++
judge1:
    andq %r9, %r9       # val <= 0?
    jle judge2            # if so, goto Npos:
    iaddq $1, %rax      # count++
judge2:
    andq %r10, %r10       # val <= 0?
    jle judge3            # if so, goto Npos:
    iaddq $1, %rax      # count++
judge3:
    andq %r11, %r11       # val <= 0?
    jle judge4            # if so, goto Npos:
    iaddq $1, %rax      # count++
judge4:
    andq %r12, %r12       # val <= 0?
    jle Nposx            # if so, goto Npos:
    iaddq $1, %rax      # count++

Nposx:
    iaddq $40, %rdi      # src++
    iaddq $40, %rsi      # dst++
Testx:
    iaddq $-5,%rdx      # len = len - 4 > 0
    jg Loopx             # if so, goto Done:

    iaddq $5,%rdx       # len = len + 4
    jmp Test
Loop:
    mrmovq (%rdi), %r10 # read val from src...
    rmmovq %r10, (%rsi) # ...and store it to dst
    andq %r10, %r10     # val <= 0?
    jle Npos            # if so, goto Npos:
    iaddq $1, %rax      # count++
Npos:
    iaddq $-1, %rdx     # len--
    iaddq $8, %rdi      # src++
    iaddq $8, %rsi      # dst++
Test:
    andq %rdx,%rdx      # len > 0?
    jg Loop             # if so, goto Done:

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
